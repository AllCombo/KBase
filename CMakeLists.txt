cmake_minimum_required(VERSION 3.11)

# Detect if being bundled via sub-directory.
if(NOT DEFINED PROJECT_NAME)
  set(KBASE_NOT_SUBPROJECT ON)
endif()

project(KBase CXX)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(KBASE_NOT_SUBPROJECT)
  set(ROOT_DIR ${CMAKE_SOURCE_DIR})
  set(DEPS_SOURCE_DIR ${ROOT_DIR}/build/deps)
  set(DEPS_DEPLOY_DIR ${CMAKE_BINARY_DIR})
endif()

option(KBASE_BUILD_UNITTESTS "Build kbase unittests" ON)

set(KBASE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(KBASE_DEPS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/deps)
set(KBASE_CMAKE_DIR ${KBASE_DIR}/cmake)

include(FetchContent)
set(FETCHCONTENT_BASE_DIR ${DEPS_DEPLOY_DIR})

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if(MSVC)
  include(${KBASE_CMAKE_DIR}/CompilerMSVC.cmake)

  foreach(OUTPUTCONFIG_TYPE ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER ${OUTPUTCONFIG_TYPE} OUTPUTCONFIG)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG_TYPE}/bin)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG_TYPE}/lib)
  endforeach()
else()
  include(${KBASE_CMAKE_DIR}/CompilerUnix.cmake)

  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
endif()

add_subdirectory(kbase)

message(STATUS "KBASE_BUILD_UNITTESTS = " ${KBASE_BUILD_UNITTESTS})

if (KBASE_BUILD_UNITTESTS AND KBASE_NOT_SUBPROJECT)
  add_subdirectory(tests)
endif()
